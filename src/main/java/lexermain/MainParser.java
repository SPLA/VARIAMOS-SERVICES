package lexermain;

import java.io.File;
import java.lang.reflect.Constructor;
import java.util.ArrayList;

import org.antlr.v4.runtime.ANTLRFileStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.tree.ParseTree;

import lexer.css3.css3Lexer;
import lexer.css3.css3Parser;
import lexer.java9.Java9Lexer;
import lexer.java9.Java9Parser;
import lexer.javascript.JavaScriptLexer;
import lexer.javascript.JavaScriptParser;
import lexer.mysql.MySqlLexer;
import lexer.mysql.MySqlParser;
import lexer.php.PhpLexer;
import lexer.php.PhpParser;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class MainParser {
	
	public static String executeParser(File final_folder, ArrayList<String> files_to_analize) {
		String message = "";
		try{
			for(String filename : files_to_analize) {
				String filetype = getFileType(filename);
				if(!filetype.equals("")) {
					DSLErrorListener errorListener = new DSLErrorListener();
					
				    @SuppressWarnings("deprecation")
				    ANTLRFileStream af = new ANTLRFileStream(final_folder+"/"+filename);
				    
				    if(filetype.equals("Java9")) {
				    	Java9Lexer lexer = new Java9Lexer(af);
				    	lexer.removeErrorListeners();	    
					    lexer.addErrorListener(errorListener);
					    CommonTokenStream tokens = new CommonTokenStream( lexer );	    
					    Java9Parser parser = new Java9Parser( tokens );
					    parser.removeErrorListeners();
					    parser.addErrorListener(errorListener);
					    parser.compilationUnit();
				    }else if(filetype.equals("css3")) {
				    	css3Lexer lexer = new css3Lexer(af);
				    	lexer.removeErrorListeners();	    
					    lexer.addErrorListener(errorListener);
					    CommonTokenStream tokens = new CommonTokenStream( lexer );	    
					    css3Parser parser = new css3Parser( tokens );
					    parser.removeErrorListeners();
					    parser.addErrorListener(errorListener);
					    parser.stylesheet();
				    }else if(filetype.equals("mysql")) {
				    	MySqlLexer lexer = new MySqlLexer(af);
				    	lexer.removeErrorListeners();	    
					    lexer.addErrorListener(errorListener);
					    CommonTokenStream tokens = new CommonTokenStream( lexer );	    
					    MySqlParser parser = new MySqlParser( tokens );
					    parser.removeErrorListeners();
					    parser.addErrorListener(errorListener);
					    /*parser.sqlStatement();*/
				    }else if(filetype.equals("php")) {
				    	PhpLexer lexer = new PhpLexer(af);
				    	lexer.removeErrorListeners();	    
					    lexer.addErrorListener(errorListener);
					    CommonTokenStream tokens = new CommonTokenStream( lexer );	    
					    PhpParser parser = new PhpParser( tokens );
					    parser.removeErrorListeners();
					    parser.addErrorListener(errorListener);
					    parser.htmlElementOrPhpBlock();
				    }else if(filetype.equals("javascript")) {
				    	JavaScriptLexer lexer = new JavaScriptLexer(af);
				    	lexer.removeErrorListeners();	    
					    lexer.addErrorListener(errorListener);
					    CommonTokenStream tokens = new CommonTokenStream( lexer );	    
					    JavaScriptParser parser = new JavaScriptParser( tokens );
					    parser.removeErrorListeners();
					    parser.addErrorListener(errorListener);
					    //parser.functionDeclaration();
					    parser.program();
				    }
				    
				    if (errorListener.hasErrors()) {
				    	message = message + "** Error found in: " + filename + " **";
				    	message = message + errorListener.toString();
				    }
				}
			}
		}
		catch(Exception e){
			message = message + e.getMessage();
            //System.out.println(e.getMessage());
        }
		
		if(message.equals("")) {
			message = "Validation completed, not errors found!!";
		}else{
			message = message + " - Validation completed, some errors found!!";
		}
		
		return message;
	}
	
	public static String getFileType(String fn) {
		String ext = getExtension(fn);
	    if(ext.equals("java")) {return "Java9";}
	    else if(ext.equals("css")) {return "css3";}
	    else if(ext.equals("sql")) {return "mysql";}
	    else if(ext.equals("php")) {return "php";}
	    else if(ext.equals("js")) {return "javascript";}
	    return "";
	}
	
	public static String getExtension(String filename) {
        if (filename == null) {
            return null;
        }
        int index = filename.lastIndexOf('.');
        if (index == -1) {
            return "";
        } else {
            return filename.substring(index + 1);
        }
    }
	
}
